version: "3"
services:
  zookeeper:
    # documentation: https://hub.docker.com/r/bitnami/zookeeper
    image: bitnami/zookeeper:3.8.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ALLOW_ANONYMOUS_LOGIN: true
      ZOO_ADMIN_SERVER_PORT_NUMBER: "8085"
    ports:
      - '2181:2181'
      - '8085:8085'
    restart: unless-stopped
    volumes:
      - ~/Documents/persistence/zookeeper/logs:/bitnami/zookeeper

  kafka:
    # documentation: https://hub.docker.com/r/bitnami/zookeeper
    hostname: kafka
    image: bitnami/kafka:3.1.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    ports:
      - "9092:9092"
      - "9093:9093"
    restart: unless-stopped
    volumes:
      - ~/Documents/persistence/kafka:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - 8082:8080
    restart: unless-stopped
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  my-experimental-api:
    image: my-experimental-api
    build: 
      context: ./api
      dockerfile: dockerfile
    depends_on:
    - kafka
    hostname: my-experimental-api
    container_name: my-experimental-api
    ports:
    - "8084:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
      KAFKA_LOGGING_TOPIC: "my-experimental-api-logging"
      KAFKA_CLIENT_ID: "my-experimental-api-client-id"

  connect:
    image: quickstart-connect-1.7.0:1.0
    build:
      context: .
      dockerfile: Dockerfile-MongoConnect
    hostname: connect
    container_name: connect
    expose:
      - 8083
    ports:
    - "8083:8083"
    depends_on:
      - zookeeper
      - kafka
    restart: unless-stopped
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

  connect-ui:
    image: landoop/kafka-connect-ui
    hostname: connect-ui
    container_name: connect-ui
    expose:
      - 8000
    ports:
      - "8000:8000"
    environment:
      - CONNECT_URL=http://connect:8083;mongo-connect

  mongodb:
    image : mongo
    container_name: mongodb
    volumes:
      - ~/Documents/persistence/mongodb:/data/db
    ports:
     - 27017:27017
    restart: unless-stopped