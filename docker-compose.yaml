version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    hostname: zookeeper
    container_name: zookeeper
    platform: linux/amd64
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"

  kafka:
    hostname: kafka
    image: confluentinc/cp-enterprise-kafka:7.0.0
    platform: linux/amd64
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      # KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: localhost:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CREATE_TOPICS: "example-topic:1:1"
    ports:
      - "9092:9092"


  # https://docs.ksqldb.io/en/latest/operate-and-deploy/installation/install-ksqldb-with-docker/
  # https://ksqldb.io/quickstart.html
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.23.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.23.1
    container_name: ksqldb-cli
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - 8082:8080
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:5.0.0
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   platform: linux/amd64
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   ports:
  #     - '8081:8081'

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:5.0.0
  #   platform: linux/amd64
  #   depends_on:
  #   - zookeeper
  #   - kafka
  #   hostname: control-center
  #   container_name: control-center
  #   ports:
  #   - "9022:9021"
  #   environment:
  #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081/"
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:9092"
  #     CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #     CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_KSQL_ENABLE: "false"

  my-experimental-api:
    image: my-experimental-api
    build: 
      context: my-experimental-api
      dockerfile: ./api/dockerfile
    depends_on:
    - kafka
    hostname: my-experimental-api
    container_name: my-experimental-api
    ports:
    - "8083:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
      KAFKA_LOGGING_TOPIC: "my-experimental-api-logging"
      KAFKA_CLIENT_ID: "my-experimental-api-client-id"
